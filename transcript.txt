Hey everyone, my name is Vishwas and welcome to a brand new tutorial series on React query. In this introductory video we will talk about the what and why of React query and in the rest of the series we will explore the different features it provides. Now, what I'm trying to do is make this channel a onestop shop for everything related to React. So far we have tutorials on react fundamentals and advanced topics. React hooks, react, redux, react formic, react storybook, react, render practical, react, react table and react TypeScript. To add to this list we are going to learn about the React query package. Let's begin with the what? What is react query? Well, it is a library for fetching data in a React application. Now you might wonder why would you need a library for data fetching? Since React is a UI library, there is no specific pattern for data fetching. What we typically do is make use of Use effect hook for data fetching and use state hook to maintain component state like loading error or the resulting data if the data is needed throughout the app. We tend to use state management libraries. But what is important to note here is that most of the state management libraries are good for working with client state like theme for the application or whether a model is open. They are not great for working with Asynchronous or Server State. And this is because server state is very different to client state. Client state is persisted in your app memory and accessing or updating it is synchronous. Server state on the other hand, is persisted remotely in a database perhaps and requires Asynchronous APIs for fetching or Updating. Also, server state, unlike client state has shared ownership data can be updated by someone else without your knowledge, which can quickly lead to UI data that is not in sync with the remote data. It becomes even more challenging when you have to deal with caching deduping multiple requests for the same data, updating still data in the background, performance optimizations when it comes to pagination and lazy loading, et cetera. If you have to cater to all these in an application, it requires significant time and effort to do it all by yourself. Or you can take the smarter approach and use a library which makes handling all these scenarios a walk in the park. And you have probably guessed it, that library is React Query. I will even go to the extent of saying even if you don't have complex requirements like the ones I've stated here, watch this series and give React query a try for your data fetching needs because you'll not want to go back. That is how amazing this library is. Well, if I've convinced you, here are some of the features we are going to be implementing in this series with the React query package. We're going to learn how to make basic queries, how to pull data work with React query DevTools, how to create reusable query hooks for data fetching, how to query by ID, parallel queries, dynamic queries, dependent queries, infinite and paginated queries. We also need to keep in mind that server state is not just fetching, it also needs updating. We will learn how to update data using mutations, how to invalidate queries when a mutation is successful, optimistic Updates and we will wind up the series with a video on how to set up an axios interceptor and work with React query. By the end of the series, you'll have a really good knowledge of React query and data fetching in React. Hopefully, you will also be in a position to recommend this library at work and will be something your teammates appreciate as well. Before we start though, let me tell you that to make the most out of this series, you must know the fundamentals of React, including React hooks. If you are new to React, please make sure to go through the fundamentals and the hooks series on this channel. Alright, with this in mind, let's get started in the next video.