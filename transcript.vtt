WEBVTT

00:00.970 --> 00:04.174
Hey everyone, my name is Vishwas and welcome to a

00:04.212 --> 00:07.790
brand new tutorial series on React query.

00:08.850 --> 00:12.638
In this introductory video we will talk about the what and why

00:12.724 --> 00:16.462
of React query and in the rest of the series we will

00:16.516 --> 00:19.630
explore the different features it provides.

00:20.770 --> 00:24.474
Now, what I'm trying to do is make this channel a onestop

00:24.522 --> 00:27.510
shop for everything related to React.

00:28.410 --> 00:32.002
So far we have tutorials on react fundamentals

00:32.066 --> 00:35.554
and advanced topics. React hooks, react,

00:35.602 --> 00:39.190
redux, react formic, react storybook,

00:39.350 --> 00:42.230
react, render practical, react,

00:42.390 --> 00:45.850
react table and react TypeScript.

00:46.830 --> 00:50.206
To add to this list we are going to learn about the

00:50.228 --> 00:54.142
React query package. Let's begin with

00:54.196 --> 00:57.790
the what? What is react query?

00:58.610 --> 01:02.078
Well, it is a library for fetching data in a

01:02.084 --> 01:05.890
React application. Now you might wonder

01:06.040 --> 01:09.650
why would you need a library for data fetching?

01:10.630 --> 01:14.242
Since React is a UI library, there is

01:14.296 --> 01:17.670
no specific pattern for data fetching.

01:18.170 --> 01:21.542
What we typically do is make use of Use

01:21.596 --> 01:25.794
effect hook for data fetching and use state hook to maintain

01:25.842 --> 01:29.814
component state like loading error or the resulting

01:29.862 --> 01:33.802
data if the data is needed throughout the app.

01:33.936 --> 01:36.650
We tend to use state management libraries.

01:37.950 --> 01:41.454
But what is important to note here is that most of

01:41.492 --> 01:45.038
the state management libraries are good for working with

01:45.124 --> 01:48.474
client state like theme

01:48.522 --> 01:52.080
for the application or whether a model is open.

01:52.710 --> 01:56.894
They are not great for working with Asynchronous or Server

01:56.942 --> 02:00.754
State. And this is because server state

02:00.872 --> 02:03.700
is very different to client state.

02:04.970 --> 02:08.754
Client state is persisted in your app memory

02:08.882 --> 02:12.390
and accessing or updating it is synchronous.

02:13.290 --> 02:17.506
Server state on the other hand, is persisted remotely in

02:17.548 --> 02:21.142
a database perhaps and requires Asynchronous

02:21.206 --> 02:24.010
APIs for fetching or Updating.

02:25.070 --> 02:28.378
Also, server state, unlike client state

02:28.464 --> 02:32.254
has shared ownership data can be

02:32.292 --> 02:35.482
updated by someone else without your knowledge,

02:35.626 --> 02:38.702
which can quickly lead to UI data that is not

02:38.756 --> 02:42.554
in sync with the remote data. It becomes

02:42.602 --> 02:45.790
even more challenging when you have to deal with

02:45.860 --> 02:49.346
caching deduping multiple requests for the

02:49.368 --> 02:53.150
same data, updating still data in the background,

02:53.310 --> 02:56.566
performance optimizations when it comes to pagination and

02:56.588 --> 03:00.486
lazy loading, et cetera. If you have

03:00.508 --> 03:03.080
to cater to all these in an application,

03:03.450 --> 03:07.254
it requires significant time and effort to do it

03:07.292 --> 03:10.874
all by yourself. Or you can take

03:10.912 --> 03:14.074
the smarter approach and use a library which

03:14.112 --> 03:17.610
makes handling all these scenarios a walk in the park.

03:18.030 --> 03:21.230
And you have probably guessed it, that library is

03:21.300 --> 03:24.718
React Query. I will even go to the

03:24.724 --> 03:28.346
extent of saying even if you don't have complex

03:28.458 --> 03:31.200
requirements like the ones I've stated here,

03:31.570 --> 03:34.994
watch this series and give React query a try for your

03:35.032 --> 03:38.260
data fetching needs because you'll not want to go back.

03:38.630 --> 03:41.700
That is how amazing this library is.

03:43.110 --> 03:46.322
Well, if I've convinced you, here are

03:46.376 --> 03:49.814
some of the features we are going to be implementing in this series with

03:49.852 --> 03:51.510
the React query package.

03:52.570 --> 03:56.166
We're going to learn how to make basic queries, how to

03:56.188 --> 04:00.410
pull data work with React query DevTools,

04:00.830 --> 04:04.730
how to create reusable query hooks for data fetching,

04:05.470 --> 04:09.318
how to query by ID, parallel queries,

04:09.494 --> 04:12.590
dynamic queries, dependent queries,

04:13.010 --> 04:15.710
infinite and paginated queries.

04:16.850 --> 04:20.830
We also need to keep in mind that server state is not just

04:20.900 --> 04:24.530
fetching, it also needs updating.

04:25.270 --> 04:29.166
We will learn how to update data using mutations,

04:29.358 --> 04:33.570
how to invalidate queries when a mutation is successful,

04:33.910 --> 04:37.414
optimistic Updates and we will wind up the series with

04:37.452 --> 04:41.334
a video on how to set up an axios interceptor and

04:41.372 --> 04:45.206
work with React query. By the end of

04:45.228 --> 04:49.222
the series, you'll have a really good knowledge of React query and

04:49.276 --> 04:52.806
data fetching in React. Hopefully, you will

04:52.828 --> 04:56.134
also be in a position to recommend this library at

04:56.172 --> 04:59.960
work and will be something your teammates appreciate as well.

05:01.010 --> 05:04.622
Before we start though, let me tell you that to make

05:04.676 --> 05:08.682
the most out of this series, you must know the fundamentals

05:08.746 --> 05:11.870
of React, including React hooks.

05:12.370 --> 05:15.998
If you are new to React, please make sure to go through the fundamentals and

05:16.004 --> 05:18.160
the hooks series on this channel.

05:19.650 --> 05:22.766
Alright, with this in mind, let's get started in

05:22.788 --> 05:23.680
the next video.
