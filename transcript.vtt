WEBVTT

00:00.970 --> 00:04.506
Hey everyone, my name is Vishwas and welcome to a brand

00:04.538 --> 00:07.790
new tutorial series on React query.

00:08.850 --> 00:12.638
In this introductory video we will talk about the what and why

00:12.724 --> 00:15.866
of React query and in the rest of the series

00:15.978 --> 00:19.630
we will explore the different features it provides.

00:20.770 --> 00:24.474
Now, what I'm trying to do is make this channel a onestop

00:24.522 --> 00:27.510
shop for everything related to React.

00:28.410 --> 00:32.002
So far we have tutorials on react fundamentals

00:32.066 --> 00:35.554
and advanced topics. React hooks, react,

00:35.602 --> 00:39.190
redux, react formic, react storybook,

00:39.350 --> 00:42.230
react, render practical, react,

00:42.390 --> 00:45.850
react table and react TypeScript.

00:46.830 --> 00:50.206
To add to this list we are going to learn about the

00:50.228 --> 00:51.790
React query package.

00:53.010 --> 00:56.478
Let's begin with the what? What is

00:56.564 --> 00:59.886
react query? Well, it is a

00:59.908 --> 01:03.140
library for fetching data in a React application.

01:04.550 --> 01:08.338
Now you might wonder why would you need a library for

01:08.424 --> 01:11.630
data fetching? Since React

01:11.710 --> 01:15.970
is a UI library, there is no specific pattern

01:16.050 --> 01:20.150
for data fetching. What we typically do is

01:20.220 --> 01:23.586
make use of Use effect hook for data fetching

01:23.698 --> 01:27.998
and use state hook to maintain component state like loading

01:28.114 --> 01:31.674
error or the resulting data if

01:31.712 --> 01:35.734
the data is needed throughout the app. We tend to use state management

01:35.782 --> 01:39.526
libraries. But what is important to note

01:39.558 --> 01:43.582
here is that most of the state management libraries are

01:43.636 --> 01:47.950
good for working with client state like

01:48.020 --> 01:51.390
theme for the application or whether a model is

01:51.460 --> 01:54.962
open. They are not great for working with

01:55.016 --> 01:57.540
Asynchronous or Server State.

01:58.150 --> 02:01.682
And this is because server state is very

02:01.736 --> 02:03.700
different to client state.

02:04.970 --> 02:09.222
Client state is persisted in your app memory and

02:09.276 --> 02:12.390
accessing or updating it is synchronous.

02:13.290 --> 02:17.138
Server state on the other hand, is persisted remotely

02:17.234 --> 02:20.278
in a database perhaps and requires

02:20.374 --> 02:24.010
Asynchronous APIs for fetching or Updating.

02:25.070 --> 02:28.378
Also, server state, unlike client state

02:28.464 --> 02:31.726
has shared ownership data

02:31.828 --> 02:35.482
can be updated by someone else without your knowledge,

02:35.626 --> 02:39.354
which can quickly lead to UI data that is not in sync

02:39.402 --> 02:44.106
with the remote data. It becomes even more challenging

02:44.298 --> 02:48.094
when you have to deal with caching deduping multiple

02:48.142 --> 02:51.922
requests for the same data, updating still data

02:51.976 --> 02:55.198
in the background, performance optimizations when

02:55.224 --> 02:58.710
it comes to pagination and lazy loading, et cetera.

02:59.850 --> 03:03.080
If you have to cater to all these in an application,

03:03.450 --> 03:07.046
it requires significant time and effort to do

03:07.068 --> 03:10.634
it all by yourself. Or you can

03:10.672 --> 03:14.362
take the smarter approach and use a library which makes

03:14.416 --> 03:17.610
handling all these scenarios a walk in the park.

03:18.030 --> 03:22.510
And you have probably guessed it, that library is React Query.

03:23.490 --> 03:26.926
I will even go to the extent of saying even if

03:26.948 --> 03:30.554
you don't have complex requirements like the ones I've stated

03:30.602 --> 03:34.418
here, watch this series and give React query a try

03:34.504 --> 03:38.260
for your data fetching needs because you'll not want to go back.

03:38.630 --> 03:41.700
That is how amazing this library is.

03:43.110 --> 03:47.314
Well, if I've convinced you, here are some of the features

03:47.362 --> 03:51.510
we are going to be implementing in this series with the React query package.

03:52.570 --> 03:55.490
We're going to learn how to make basic queries,

03:55.650 --> 03:59.174
how to pull data work with React query

03:59.222 --> 04:03.062
DevTools, how to create reusable query hooks

04:03.126 --> 04:06.554
for data fetching, how to query by

04:06.592 --> 04:10.890
ID, parallel queries, dynamic queries,

04:11.050 --> 04:14.922
dependent queries, infinite and paginated

04:14.986 --> 04:18.510
queries. We also need to keep in mind

04:18.580 --> 04:21.790
that server state is not just fetching,

04:22.210 --> 04:25.794
it also needs updating. We will

04:25.832 --> 04:29.166
learn how to update data using mutations,

04:29.358 --> 04:32.562
how to invalidate queries when a mutation is

04:32.616 --> 04:36.226
successful, optimistic Updates and we will

04:36.248 --> 04:39.574
wind up the series with a video on how to set up an

04:39.612 --> 04:43.110
axios interceptor and work with React query.

04:44.330 --> 04:47.794
By the end of the series, you'll have a really good knowledge

04:47.842 --> 04:51.030
of React query and data fetching in React.

04:51.690 --> 04:54.886
Hopefully, you will also be in a position to recommend

04:54.988 --> 04:58.530
this library at work and will be something your teammates

04:58.610 --> 05:02.318
appreciate as well. Before we start though,

05:02.404 --> 05:05.806
let me tell you that to make the most out of this

05:05.828 --> 05:09.722
series, you must know the fundamentals of React,

05:09.866 --> 05:13.246
including React hooks. If you are new to

05:13.268 --> 05:16.442
React, please make sure to go through the fundamentals and the hooks

05:16.506 --> 05:18.160
series on this channel.

05:19.650 --> 05:22.766
Alright, with this in mind, let's get started in

05:22.788 --> 05:23.680
the next video.
