WEBVTT

00:00.970 --> 00:04.782
Hey everyone, my name is Vishwas and welcome to a brand new

00:04.836 --> 00:07.790
tutorial series on React query.

00:08.850 --> 00:12.062
In this introductory video we will talk about the what

00:12.116 --> 00:15.866
and why of React query and in the rest of the series

00:15.978 --> 00:19.630
we will explore the different features it provides.

00:20.770 --> 00:24.474
Now, what I'm trying to do is make this channel a onestop

00:24.522 --> 00:27.510
shop for everything related to React.

00:28.410 --> 00:32.342
So far we have tutorials on react fundamentals and

00:32.396 --> 00:36.354
advanced topics. React hooks, react, redux,

00:36.482 --> 00:39.782
react formic, react storybook, react,

00:39.846 --> 00:44.186
render practical, react, react table and

00:44.288 --> 00:47.994
react TypeScript. To add to this

00:48.032 --> 00:51.790
list we are going to learn about the React query package.

00:53.010 --> 00:57.002
Let's begin with the what? What is react

00:57.066 --> 01:00.782
query? Well, it is a library for

01:00.836 --> 01:03.140
fetching data in a React application.

01:04.550 --> 01:08.338
Now you might wonder why would you need a library for

01:08.424 --> 01:12.146
data fetching? Since React is a

01:12.168 --> 01:16.390
UI library, there is no specific pattern for

01:16.460 --> 01:19.718
data fetching. What we typically do

01:19.804 --> 01:23.586
is make use of Use effect hook for data fetching

01:23.698 --> 01:27.190
and use state hook to maintain component state like

01:27.260 --> 01:30.460
loading error or the resulting data

01:31.310 --> 01:34.438
if the data is needed throughout the app. We tend

01:34.454 --> 01:36.650
to use state management libraries.

01:37.950 --> 01:41.150
But what is important to note here is that most

01:41.220 --> 01:45.038
of the state management libraries are good for working with

01:45.124 --> 01:48.686
client state like theme for

01:48.708 --> 01:52.080
the application or whether a model is open.

01:52.710 --> 01:56.894
They are not great for working with Asynchronous or Server

01:56.942 --> 02:00.754
State. And this is because server state

02:00.872 --> 02:03.700
is very different to client state.

02:04.970 --> 02:08.754
Client state is persisted in your app memory

02:08.882 --> 02:12.390
and accessing or updating it is synchronous.

02:13.290 --> 02:17.138
Server state on the other hand, is persisted remotely

02:17.234 --> 02:21.142
in a database perhaps and requires Asynchronous

02:21.206 --> 02:24.010
APIs for fetching or Updating.

02:25.070 --> 02:28.378
Also, server state, unlike client state

02:28.464 --> 02:31.726
has shared ownership data

02:31.828 --> 02:35.482
can be updated by someone else without your knowledge,

02:35.626 --> 02:39.354
which can quickly lead to UI data that is not in sync

02:39.402 --> 02:43.134
with the remote data. It becomes even more

02:43.172 --> 02:46.682
challenging when you have to deal with caching

02:46.826 --> 02:50.260
deduping multiple requests for the same data,

02:50.710 --> 02:54.942
updating still data in the background, performance optimizations

02:55.006 --> 02:58.710
when it comes to pagination and lazy loading, et cetera.

02:59.850 --> 03:03.080
If you have to cater to all these in an application,

03:03.450 --> 03:06.886
it requires significant time and effort to

03:06.908 --> 03:08.460
do it all by yourself.

03:09.550 --> 03:12.730
Or you can take the smarter approach and

03:12.800 --> 03:16.554
use a library which makes handling all these scenarios a walk

03:16.592 --> 03:19.818
in the park. And you have probably guessed it,

03:19.904 --> 03:22.510
that library is React Query.

03:23.490 --> 03:26.670
I will even go to the extent of saying even

03:26.740 --> 03:30.106
if you don't have complex requirements like the ones I've

03:30.138 --> 03:33.454
stated here, watch this series and give React

03:33.502 --> 03:36.846
query a try for your data fetching needs because you'll

03:36.878 --> 03:40.514
not want to go back. That is how amazing this

03:40.552 --> 03:44.254
library is. Well, if I've

03:44.302 --> 03:47.478
convinced you, here are some of the features we

03:47.484 --> 03:51.510
are going to be implementing in this series with the React query package.

03:52.570 --> 03:56.166
We're going to learn how to make basic queries, how to

03:56.188 --> 04:00.410
pull data work with React query DevTools,

04:00.830 --> 04:04.730
how to create reusable query hooks for data fetching,

04:05.470 --> 04:09.318
how to query by ID, parallel queries,

04:09.494 --> 04:12.590
dynamic queries, dependent queries,

04:13.010 --> 04:15.710
infinite and paginated queries.

04:16.850 --> 04:20.830
We also need to keep in mind that server state is not just

04:20.900 --> 04:24.530
fetching, it also needs updating.

04:25.270 --> 04:29.166
We will learn how to update data using mutations,

04:29.358 --> 04:32.562
how to invalidate queries when a mutation is

04:32.616 --> 04:36.066
successful, optimistic Updates and we

04:36.088 --> 04:39.574
will wind up the series with a video on how to set up an

04:39.612 --> 04:43.110
axios interceptor and work with React query.

04:44.330 --> 04:47.794
By the end of the series, you'll have a really good knowledge

04:47.842 --> 04:51.030
of React query and data fetching in React.

04:51.690 --> 04:55.302
Hopefully, you will also be in a position to recommend this

04:55.356 --> 04:59.122
library at work and will be something your teammates appreciate

04:59.186 --> 05:02.318
as well. Before we start though,

05:02.404 --> 05:06.538
let me tell you that to make the most out of this series,

05:06.714 --> 05:09.722
you must know the fundamentals of React,

05:09.866 --> 05:13.658
including React hooks. If you are new to React,

05:13.754 --> 05:17.246
please make sure to go through the fundamentals and the hooks series on

05:17.268 --> 05:21.550
this channel. Alright, with this in mind,

05:21.620 --> 05:23.680
let's get started in the next video.
