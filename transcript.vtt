1
0:00:00 --> 0:00:09.120000
Hey everyone, my name is Vishwas and welcome to a brand new tutorial series on React Query.
2
0:00:09.120000 --> 0:00:14.840000
In this introductory video, we will talk about the what and why of React Query and in the
3
0:00:14.840000 --> 0:00:21.080000
rest of the series, we will explore the different features it provides.
4
0:00:21.080000 --> 0:00:26.760000
Now what I'm trying to do is make this channel a one stop shop for everything related to
5
0:00:26.760000 --> 0:00:28.680000
React.
6
0:00:28.680000 --> 0:00:36.640000
So far, we have tutorials on React Fundamentals and Advanced Topics, React Hooks, React Redux,
7
0:00:36.640000 --> 0:00:45.080000
React Formic, React Storybook, React Render, Practical React, React Table and React Type
8
0:00:45.080000 --> 0:00:47.080000
Script.
9
0:00:47.080000 --> 0:00:53.320000
To add to this list, we are going to learn about the React Query package.
10
0:00:53.320000 --> 0:00:55.840000
Let's begin with the what.
11
0:00:55.840000 --> 0:00:58.240000
What is React Query?
12
0:00:58.240000 --> 0:01:03.920000
Well, it is a library for fetching data in a React application.
13
0:01:03.920000 --> 0:01:11.080000
Now you might wonder why would you need a library for data fetching?
14
0:01:11.080000 --> 0:01:18.520000
Since React is a UI library, there is no specific pattern for data fetching.
15
0:01:18.520000 --> 0:01:25.120000
What we typically do is make use of use effect hook for data fetching and use state hook
16
0:01:25.120000 --> 0:01:30.680000
to maintain component state like loading, error or the resulting data.
17
0:01:30.680000 --> 0:01:38.280000
If the data is needed throughout the app, we tend to use state management libraries.
18
0:01:38.280000 --> 0:01:43.480000
But what is important to note here is that most of the state management libraries are
19
0:01:43.480000 --> 0:01:47.360000
good for working with client state.
20
0:01:47.360000 --> 0:01:52
State like theme for the application or whether a model is open.
21
0:01:52.480000 --> 0:01:58.480000
They are not great for working with asynchronous or server state.
22
0:01:58.480000 --> 0:02:05.320000
And this is because server state is very different to client state.
23
0:02:05.320000 --> 0:02:13.720000
Client state is persisted in your app memory and accessing or updating it is synchronous.
24
0:02:13.720000 --> 0:02:20.400000
Server state on the other hand is persisted remotely in a database perhaps and requires
25
0:02:20.400000 --> 0:02:25
asynchronous APIs for fetching or updating.
26
0:02:25 --> 0:02:31.560000
Also, server state unlike client state has shared ownership.
27
0:02:31.560000 --> 0:02:37.160000
Data can be updated by someone else without your knowledge which can quickly lead to UI
28
0:02:37.160000 --> 0:02:42.080000
data that is not in sync with the remote data.
29
0:02:42.080000 --> 0:02:48.040000
It becomes even more challenging when you have to deal with caching, dedupping multiple
30
0:02:48.040000 --> 0:02:55
requests for the same data, updating state data in the background, performance optimizations
31
0:02:55 --> 0:03:00.120000
when it comes to pagination and lazy loading, etc.
32
0:03:00.120000 --> 0:03:06.840000
If you have to cater to all these in an application, it requires significant time and effort to
33
0:03:06.840000 --> 0:03:09.880000
do it all by yourself.
34
0:03:09.880000 --> 0:03:16.200000
Or you can take the smarter approach and use a library which makes handling all these scenarios
35
0:03:16.200000 --> 0:03:18.400000
a walk in the park.
36
0:03:18.400000 --> 0:03:23.680000
And you have probably guessed it that library is React Query.
37
0:03:23.680000 --> 0:03:29.440000
I will even go to the extent of saying even if you don't have complex requirements like
38
0:03:29.440000 --> 0:03:35.560000
the ones I've stated here, watch the series and give React Query a try for your data fetching
39
0:03:35.560000 --> 0:03:38.920000
needs because you will not want to go back.
40
0:03:38.920000 --> 0:03:42.320000
That is how amazing this library is.
41
0:03:43.320000 --> 0:03:48.600000
Well, if I've convinced you, here are some of the features we are going to be implementing
42
0:03:48.600000 --> 0:03:51.440000
in the series with the React Query package.
43
0:03:51.440000 --> 0:03:59.360000
We are going to learn how to make basic queries, how to pull data, work with React Query Dev
44
0:03:59.360000 --> 0:04:08.400000
tools, how to create reusable query hooks for data fetching, how to query by ID, parallel
45
0:04:08.400000 --> 0:04:17.120000
queries, dynamic queries, dependent queries, infinite and paginated queries.
46
0:04:17.120000 --> 0:04:22.520000
We also need to keep in mind that server state is not just fetching.
47
0:04:22.520000 --> 0:04:25.600000
It also needs updating.
48
0:04:25.600000 --> 0:04:32.240000
We will learn how to update data using mutations, how to invalidate queries when a mutation
49
0:04:32.240000 --> 0:04:38.600000
is successful, optimistic updates and we will wind up the series with a video on how
50
0:04:38.600000 --> 0:04:44.600000
to set up an Axios Interceptor and work with React Query.
51
0:04:44.600000 --> 0:04:49.560000
By the end of the series, you will have a really good knowledge of React Query and data
52
0:04:49.560000 --> 0:04:51.240000
fetching in React.
53
0:04:51.240000 --> 0:04:57.120000
Hopefully, you will also be in a position to recommend this library at work and will
54
0:04:57.120000 --> 0:05:01.440000
be something your teammates appreciate as well.
55
0:05:01.440000 --> 0:05:07.400000
Before we start though, let me tell you that to make the most out of the series, you must
56
0:05:07.400000 --> 0:05:12.680000
know the fundamentals of React including React hooks.
57
0:05:12.680000 --> 0:05:16.440000
If you are new to React, please make sure to go through the fundamentals and the hooks
58
0:05:16.440000 --> 0:05:18.320000
series on this channel.
59
0:05:18.320000 --> 0:05:23.520000
Alright, with this in mind, let's get started in the next video.
