WEBVTT

00:00.970 --> 00:04.174
Hey everyone, my name is Vishwas and welcome to a

00:04.212 --> 00:07.790
brand new tutorial series on React query.

00:08.850 --> 00:12.286
In this introductory video we will talk about the what and

00:12.308 --> 00:15.866
why of React query and in the rest of the series

00:15.978 --> 00:19.630
we will explore the different features it provides.

00:20.770 --> 00:24.474
Now, what I'm trying to do is make this channel a onestop

00:24.522 --> 00:27.510
shop for everything related to React.

00:28.410 --> 00:32.002
So far we have tutorials on react fundamentals

00:32.066 --> 00:35.554
and advanced topics. React hooks, react,

00:35.602 --> 00:39.190
redux, react formic, react storybook,

00:39.350 --> 00:42.230
react, render practical, react,

00:42.390 --> 00:45.850
react table and react TypeScript.

00:46.830 --> 00:50.522
To add to this list we are going to learn about the React

00:50.586 --> 00:54.414
query package. Let's begin with the

00:54.452 --> 00:57.790
what? What is react query?

00:58.610 --> 01:02.078
Well, it is a library for fetching data in a

01:02.084 --> 01:06.498
React application. Now you might wonder why

01:06.584 --> 01:09.650
would you need a library for data fetching?

01:10.630 --> 01:14.658
Since React is a UI library, there is no

01:14.744 --> 01:17.670
specific pattern for data fetching.

01:18.170 --> 01:21.542
What we typically do is make use of Use

01:21.596 --> 01:24.614
effect hook for data fetching and use state

01:24.652 --> 01:27.998
hook to maintain component state like loading

01:28.114 --> 01:32.042
error or the resulting data if the data

01:32.096 --> 01:36.650
is needed throughout the app. We tend to use state management libraries.

01:37.950 --> 01:41.454
But what is important to note here is that most of

01:41.492 --> 01:45.530
the state management libraries are good for working with client

01:45.610 --> 01:48.846
state like theme for the

01:48.868 --> 01:52.080
application or whether a model is open.

01:52.710 --> 01:56.894
They are not great for working with Asynchronous or Server

01:56.942 --> 02:00.754
State. And this is because server state

02:00.872 --> 02:03.700
is very different to client state.

02:04.970 --> 02:08.754
Client state is persisted in your app memory

02:08.882 --> 02:12.390
and accessing or updating it is synchronous.

02:13.290 --> 02:17.138
Server state on the other hand, is persisted remotely

02:17.234 --> 02:21.142
in a database perhaps and requires Asynchronous

02:21.206 --> 02:24.010
APIs for fetching or Updating.

02:25.070 --> 02:28.378
Also, server state, unlike client state

02:28.464 --> 02:32.046
has shared ownership data can

02:32.068 --> 02:36.222
be updated by someone else without your knowledge, which can

02:36.276 --> 02:39.614
quickly lead to UI data that is not in sync with

02:39.652 --> 02:42.862
the remote data. It becomes even

02:42.916 --> 02:46.682
more challenging when you have to deal with caching

02:46.826 --> 02:50.260
deduping multiple requests for the same data,

02:50.710 --> 02:53.150
updating still data in the background,

02:53.310 --> 02:56.914
performance optimizations when it comes to pagination and lazy

02:56.962 --> 02:58.710
loading, et cetera.

02:59.850 --> 03:03.080
If you have to cater to all these in an application,

03:03.450 --> 03:07.602
it requires significant time and effort to do it all

03:07.676 --> 03:11.606
by yourself. Or you can take the smarter

03:11.638 --> 03:16.102
approach and use a library which makes handling all these scenarios

03:16.166 --> 03:19.446
a walk in the park. And you have probably guessed

03:19.478 --> 03:22.510
it, that library is React Query.

03:23.490 --> 03:27.038
I will even go to the extent of saying even if you

03:27.044 --> 03:30.554
don't have complex requirements like the ones I've stated

03:30.602 --> 03:34.066
here, watch this series and give React query a

03:34.088 --> 03:37.234
try for your data fetching needs because you'll not want

03:37.272 --> 03:40.990
to go back. That is how amazing this library

03:41.070 --> 03:44.686
is. Well, if I've convinced

03:44.718 --> 03:48.594
you, here are some of the features we are going to be implementing

03:48.642 --> 03:51.510
in this series with the React query package.

03:52.570 --> 03:56.166
We're going to learn how to make basic queries, how to

03:56.188 --> 04:00.410
pull data work with React query DevTools,

04:00.830 --> 04:04.730
how to create reusable query hooks for data fetching,

04:05.470 --> 04:09.318
how to query by ID, parallel queries,

04:09.494 --> 04:12.590
dynamic queries, dependent queries,

04:13.010 --> 04:15.710
infinite and paginated queries.

04:16.850 --> 04:20.430
We also need to keep in mind that server state is not

04:20.500 --> 04:24.530
just fetching, it also needs updating.

04:25.270 --> 04:29.166
We will learn how to update data using mutations,

04:29.358 --> 04:33.570
how to invalidate queries when a mutation is successful,

04:33.910 --> 04:37.414
optimistic Updates and we will wind up the series with

04:37.452 --> 04:41.334
a video on how to set up an axios interceptor and

04:41.372 --> 04:44.806
work with React query. By the

04:44.828 --> 04:48.102
end of the series, you'll have a really good knowledge of

04:48.156 --> 04:51.030
React query and data fetching in React.

04:51.690 --> 04:55.302
Hopefully, you will also be in a position to recommend this

04:55.356 --> 04:58.530
library at work and will be something your teammates

04:58.610 --> 05:02.318
appreciate as well. Before we start though,

05:02.404 --> 05:06.538
let me tell you that to make the most out of this series,

05:06.714 --> 05:09.722
you must know the fundamentals of React,

05:09.866 --> 05:13.658
including React hooks. If you are new to React,

05:13.754 --> 05:17.246
please make sure to go through the fundamentals and the hooks series on

05:17.268 --> 05:21.246
this channel. Alright, with this in

05:21.268 --> 05:23.680
mind, let's get started in the next video.
