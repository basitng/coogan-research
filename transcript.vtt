WEBVTT

00:00.650 --> 00:04.442
React Query, a react library that simplifies the way we fetch,

00:04.506 --> 00:07.630
cache and synchronize data from a server. React itself

00:07.700 --> 00:11.354
has no opinions about how you fetch data from the front end. The most basic

00:11.402 --> 00:14.814
approach is to use the browser fetch API when a component first

00:14.852 --> 00:18.462
mounts in Use Effect, then manage the response with Use State. That works,

00:18.516 --> 00:21.562
but becomes increasingly difficult when requirements like Caching,

00:21.626 --> 00:24.966
Retries and Deduping come into play. React Query not only

00:25.028 --> 00:28.962
simplifies your data fetching code, but also handles these complex requirements

00:29.026 --> 00:32.358
out of the box. For example, you might want to refresh data when the

00:32.364 --> 00:35.906
user leaves and then comes back to the same window. Fetch on Window Focus handles

00:35.938 --> 00:39.426
that for you. If you're building an infinite scroll feature, the Use Infinite Query

00:39.458 --> 00:42.538
hook will make your life much easier. Or if you're writing data to the

00:42.544 --> 00:46.422
server, you can make changes appear instantly in the UI with optimistic updates.

00:46.486 --> 00:50.006
And you can debug all your data fetching logic with its integrated DevTools.

00:50.038 --> 00:52.906
They've thought of pretty much everything, and it's so good at what it does that

00:52.928 --> 00:56.090
it might even eliminate your need for a global state management solution.

00:56.170 --> 00:59.722
To get started, install it with NPM, then instantiate the query client

00:59.786 --> 01:03.486
and provide it somewhere in your component tree. Now, every child component will

01:03.508 --> 01:07.054
be able to fetch data like a pro. Also add the React Query DevTools here

01:07.092 --> 01:10.322
to debug and development. Now, define a function anywhere you'd like

01:10.376 --> 01:13.522
to fetch data from your server and the component that consumes that data.

01:13.576 --> 01:16.834
Add the use query hook. It takes a key that allows React Query to

01:16.872 --> 01:20.434
manage this data efficiently, then the data fetching function as the second argument

01:20.482 --> 01:24.006
it will make. The request, then return the data and also the status of the

01:24.028 --> 01:27.686
request. If it's loading, we show a loading screen. If the request fails, it will

01:27.708 --> 01:31.062
actually retry the request three times, and if it still fails at that point,

01:31.116 --> 01:34.486
the status will change to error. Now, if it was a success, we can render

01:34.518 --> 01:37.818
out the data in the UI, and that's a lot of functionality with not a

01:37.824 --> 01:40.570
lot of code. But you might be wondering what this key is all about.

01:40.640 --> 01:43.734
Well, now let's imagine that we want to update this data on the server.

01:43.782 --> 01:47.006
To handle that, we can bring in the Use Mutation hook. When data is

01:47.028 --> 01:50.814
written to the server, we can hook into it with the On Success function and

01:50.852 --> 01:54.030
automatically invalidate the query we already made based on its key.

01:54.100 --> 01:57.770
This tells React Query to invalidate and refresh the original request.

01:57.850 --> 02:01.406
And we can even tap into the state of this process by referencing is Fetching

02:01.438 --> 02:04.418
from Use Query to keep tabs on the loading state. Now, if you want to

02:04.424 --> 02:07.426
run multiple queries in the same component, you can easily do that, and it will

02:07.448 --> 02:11.334
automatically run them in parallel to ensure optimal performance. But sometimes one

02:11.372 --> 02:15.042
query might depend on data from another. Like all the cars owned by a user

02:15.106 --> 02:18.886
that's also made easy with the enabled option. Like I said before, they've thought

02:18.908 --> 02:22.118
of everything. This has been React query in 100 seconds. If you

02:22.124 --> 02:25.586
want to see more content like this, enroll in my full React course on fireship

02:25.618 --> 02:28.806
I O. That breaks down a ton of React concepts in 100 seconds or

02:28.828 --> 02:31.420
less. Thanks for watching and I will see you in the next one.
